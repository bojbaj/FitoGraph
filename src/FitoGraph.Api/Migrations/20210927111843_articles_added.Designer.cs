// <auto-generated />
using System;
using FitoGraph.Api.Domain.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitoGraph.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210927111843_articles_added")]
    partial class articles_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TActivityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Carb")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PALForFeMale")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("PALForMale")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Protein")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TActivityLevel");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TAllergy");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TArticle");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TArticleSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TSportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TArticleId");

                    b.HasIndex("TSportId");

                    b.ToTable("TArticleSport");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TBodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TBodyType");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TDeficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TDeficiency");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TDiet");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TFoodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TFoodTypeId");

                    b.HasIndex("TReferenceId");

                    b.HasIndex("TUserId");

                    b.ToTable("TFood");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TAllergyId")
                        .HasColumnType("int");

                    b.Property<int>("TFoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TAllergyId");

                    b.HasIndex("TFoodId");

                    b.ToTable("TFoodAllergy");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodDeficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TDeficiencyId")
                        .HasColumnType("int");

                    b.Property<int>("TFoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TDeficiencyId");

                    b.HasIndex("TFoodId");

                    b.ToTable("TFoodDeficiency");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TDietId")
                        .HasColumnType("int");

                    b.Property<int>("TFoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TDietId");

                    b.HasIndex("TFoodId");

                    b.ToTable("TFoodDiet");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodNutrition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TFoodId")
                        .HasColumnType("int");

                    b.Property<int>("TNutritionId")
                        .HasColumnType("int");

                    b.Property<int>("TNutritionUnitId")
                        .HasColumnType("int");

                    b.Property<int>("TReferenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TFoodId");

                    b.HasIndex("TNutritionId");

                    b.HasIndex("TNutritionUnitId");

                    b.HasIndex("TReferenceId");

                    b.ToTable("TFoodNutrition");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodNutritionCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TFoodId")
                        .HasColumnType("int");

                    b.Property<int>("TNutritionConditionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TFoodId");

                    b.HasIndex("TNutritionConditionId");

                    b.ToTable("TFoodNutritionCondition");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TFoodType");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TGoal");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TNutrition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TNutritionGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("UQ_TNutrition_Code")
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("TNutritionGroupId");

                    b.HasIndex("TReferenceId");

                    b.ToTable("TNutrition");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TNutritionCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TNutritionCondition");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TNutritionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("UQ_TNutritionGroup_Code");

                    b.ToTable("TNutritionGroup");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TNutritionUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountInGram")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TNutritionUnit");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TSupplierId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPayablePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TrackingCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TSupplierId");

                    b.HasIndex("TUserId");

                    b.ToTable("TOrder");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("RowPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TFoodId")
                        .HasColumnType("int");

                    b.Property<int>("TOrderId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("TFoodId");

                    b.HasIndex("TOrderId");

                    b.HasIndex("TUserId");

                    b.ToTable("TOrderDetail");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Alpha_Carotene")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Ash")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Beta_Carotene")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Biotin_B7")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Caffeine")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Calcium")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Calorie")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Chloride")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Cholesterol")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Chromium")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Copper")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cryptoxanthin")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Dietary_Fibre")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("Energy")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Fat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Fluoride")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Folate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Folic_Acid")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Fructose")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Glucose")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Iodine")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Iron")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Lactose")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Lutein")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Lycopene")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Magnesium")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Manganese")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Molybdenum")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Niacin_B3")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Pantothenic_Acid_B5")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Phosphorus")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Protein")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<decimal>("Riboflavin_B2")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Selenium")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Sodium")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Starch")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Sucrose")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Sulphur")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Thiamin_B1")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Tin")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total_Long_Chain_Omega_3_Fatty_Acids")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total_Monounsaturated_Fatty_Acids")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total_Polyunsaturated_Fatty_Acids")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total_Saturated_Fatty_Acids")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total_Sugars")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total_Trans_Fatty_Acids")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Vitamin_A")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Vitamin_B12")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Vitamin_B6")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Vitamin_C")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Vitamin_D")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Vitamin_E")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Zinc")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("carbohydrate")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("TReference");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TReferenceInRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("FromAge")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TReferenceId");

                    b.ToTable("TReferenceInRange");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TRegionCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TRegionStateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TRegionStateId");

                    b.ToTable("TRegionCity");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TRegionCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TRegionCountry");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TRegionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TRegionCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TRegionCountryId");

                    b.ToTable("TRegionState");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TSport");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("Fat")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("FireBaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Forearms")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Hips")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(11,8)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("ShareAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SharePercent")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("TActivityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("TBodyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TReferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("TRegionCityId")
                        .HasColumnType("int");

                    b.Property<int?>("TWeeklyGoalId")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetWeight")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Waist")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("TActivityLevelId");

                    b.HasIndex("TBodyTypeId");

                    b.HasIndex("TReferenceId");

                    b.HasIndex("TRegionCityId");

                    b.HasIndex("TWeeklyGoalId");

                    b.ToTable("TUser");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TAllergyId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TAllergyId");

                    b.HasIndex("TUserId");

                    b.ToTable("TUserAllergy");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserDeficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TDeficiencyId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TDeficiencyId");

                    b.HasIndex("TUserId");

                    b.ToTable("TUserDeficiency");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TDietId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TDietId");

                    b.HasIndex("TUserId");

                    b.ToTable("TUserDiet");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserFoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TFoodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TFoodTypeId");

                    b.HasIndex("TUserId");

                    b.ToTable("TUserFoodType");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserNutritionCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TNutritionConditionId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TNutritionConditionId");

                    b.HasIndex("TUserId");

                    b.ToTable("TUserNutritionCondition");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("TSportId")
                        .HasColumnType("int");

                    b.Property<int>("TUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TSportId");

                    b.HasIndex("TUserId");

                    b.ToTable("TUserSport");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TWeeklyGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaloryRequirePercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TGoalId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TGoalId");

                    b.ToTable("TWeeklyGoal");
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TArticleSport", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TArticle", "TArticle")
                        .WithMany("TArticleSports")
                        .HasForeignKey("TArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TSport", "TSport")
                        .WithMany("TArticleSports")
                        .HasForeignKey("TSportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFood", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TFoodType", "TFoodType")
                        .WithMany("TFoods")
                        .HasForeignKey("TFoodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TReference", "TReference")
                        .WithMany("TFoods")
                        .HasForeignKey("TReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany("TFoods")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodAllergy", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TAllergy", "TAllergy")
                        .WithMany("TFoodAllergies")
                        .HasForeignKey("TAllergyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TFood", "TFood")
                        .WithMany("TFoodAllergies")
                        .HasForeignKey("TFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodDeficiency", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TDeficiency", "TDeficiency")
                        .WithMany("TFoodDeficiencies")
                        .HasForeignKey("TDeficiencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TFood", "TFood")
                        .WithMany("TFoodDeficiencies")
                        .HasForeignKey("TFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodDiet", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TDiet", "TDiet")
                        .WithMany("TFoodDiets")
                        .HasForeignKey("TDietId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TFood", "TFood")
                        .WithMany("TFoodDiets")
                        .HasForeignKey("TFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodNutrition", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TFood", "TFood")
                        .WithMany("TFoodNutritions")
                        .HasForeignKey("TFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TNutrition", "TNutrition")
                        .WithMany()
                        .HasForeignKey("TNutritionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TNutritionUnit", "TNutritionUnit")
                        .WithMany("TFoodNutritions")
                        .HasForeignKey("TNutritionUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TReference", "TReference")
                        .WithMany("TFoodNutritions")
                        .HasForeignKey("TReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TFoodNutritionCondition", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TFood", "TFood")
                        .WithMany("TFoodNutritionConditions")
                        .HasForeignKey("TFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TNutritionCondition", "TNutritionCondition")
                        .WithMany("TFoodNutritionConditions")
                        .HasForeignKey("TNutritionConditionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TNutrition", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TNutritionGroup", "TNutritionGroup")
                        .WithMany("TNutritions")
                        .HasForeignKey("TNutritionGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TReference", "TReference")
                        .WithMany("TNutritions")
                        .HasForeignKey("TReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TOrder", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TSupplier")
                        .WithMany("TSullpierOrders")
                        .HasForeignKey("TSupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany("TUserOrders")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TOrderDetail", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TFood", "TFood")
                        .WithMany()
                        .HasForeignKey("TFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TOrder", "TOrder")
                        .WithMany("TOrderDetails")
                        .HasForeignKey("TOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany()
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TReferenceInRange", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TReference", "TReference")
                        .WithMany("TReferenceInRange")
                        .HasForeignKey("TReferenceId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TRegionCity", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TRegionState", "TRegionState")
                        .WithMany("TRegionCities")
                        .HasForeignKey("TRegionStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TRegionState", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TRegionCountry", "TRegionCountry")
                        .WithMany("TRegionStates")
                        .HasForeignKey("TRegionCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUser", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TActivityLevel", "TActivityLevel")
                        .WithMany("TUsers")
                        .HasForeignKey("TActivityLevelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FitoGraph.Api.Domain.Entities.TBodyType", "TBodyType")
                        .WithMany("TUsers")
                        .HasForeignKey("TBodyTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FitoGraph.Api.Domain.Entities.TReference", "TReference")
                        .WithMany("TUsers")
                        .HasForeignKey("TReferenceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FitoGraph.Api.Domain.Entities.TRegionCity", "TRegionCity")
                        .WithMany("TUsers")
                        .HasForeignKey("TRegionCityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FitoGraph.Api.Domain.Entities.TWeeklyGoal", "TWeeklyGoal")
                        .WithMany("TUsers")
                        .HasForeignKey("TWeeklyGoalId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserAllergy", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TAllergy", "TAllergy")
                        .WithMany("TUserAllergies")
                        .HasForeignKey("TAllergyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany("TUserAllergies")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserDeficiency", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TDeficiency", "TDeficiency")
                        .WithMany("TUserDeficiencies")
                        .HasForeignKey("TDeficiencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany("TUserDeficiencies")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserDiet", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TDiet", "TDiet")
                        .WithMany("TUserDiets")
                        .HasForeignKey("TDietId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany("TUserDiets")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserFoodType", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TFoodType", "TFoodType")
                        .WithMany("TUserFoodTypes")
                        .HasForeignKey("TFoodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany("TUserFoodTypes")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserNutritionCondition", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TNutritionCondition", "TNutritionCondition")
                        .WithMany("TUserNutritionConditions")
                        .HasForeignKey("TNutritionConditionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany("TUserNutritionConditions")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TUserSport", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TSport", "TSport")
                        .WithMany("TUserSports")
                        .HasForeignKey("TSportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FitoGraph.Api.Domain.Entities.TUser", "TUser")
                        .WithMany("TUserSports")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FitoGraph.Api.Domain.Entities.TWeeklyGoal", b =>
                {
                    b.HasOne("FitoGraph.Api.Domain.Entities.TGoal", "TGoal")
                        .WithMany("TWeeklyGoals")
                        .HasForeignKey("TGoalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
